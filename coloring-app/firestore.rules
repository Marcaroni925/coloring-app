// Firestore Security Rules for Coloring Book Creator
// Evidence-based implementation following Firebase security best practices
// https://firebase.google.com/docs/firestore/security/rules-conditions

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // USER IMAGES COLLECTION
    // Allows authenticated users to manage their own images
    match /user_images/{imageId} {
      // READ: Users can only read their own images
      allow read: if request.auth != null 
                  && request.auth.uid == resource.data.userId;
      
      // WRITE: Users can only create images with their own userId
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.userId
                    && validateImageData(request.resource.data);
      
      // UPDATE: Users can only update their own images
      allow update: if request.auth != null 
                    && request.auth.uid == resource.data.userId
                    && validateImageData(request.resource.data);
      
      // DELETE: Users can only delete their own images
      allow delete: if request.auth != null 
                    && request.auth.uid == resource.data.userId;
    }
    
    // HEALTH CHECK COLLECTION (for Firebase Admin SDK health checks)
    match /health/{document} {
      allow read: if request.auth != null;
    }
    
    // USER PROFILES COLLECTION (future feature)
    match /user_profiles/{userId} {
      allow read, write: if request.auth != null 
                         && request.auth.uid == userId;
    }
    
    // VALIDATION FUNCTIONS
    
    // Validates image document structure and content
    function validateImageData(data) {
      return data.keys().hasAll(['userId', 'imageUrl', 'originalPrompt', 'createdAt']) &&
             data.userId is string &&
             data.imageUrl is string &&
             data.originalPrompt is string &&
             data.originalPrompt.size() <= 1000 &&
             data.originalPrompt.size() > 0 &&
             // Optional fields validation
             (!('refinedPrompt' in data) || (data.refinedPrompt is string && data.refinedPrompt.size() <= 2000)) &&
             (!('metadata' in data) || data.metadata is map) &&
             (!('userEmail' in data) || data.userEmail is string);
    }
    
    // Validates user is authenticated and email is verified (optional)
    function isAuthenticatedUser() {
      return request.auth != null && 
             request.auth.token.email_verified == true;
    }
    
    // Validates user owns the resource
    function isOwner(userId) {
      return request.auth != null && 
             request.auth.uid == userId;
    }
    
    // Default deny rule for all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// DEPLOYMENT INSTRUCTIONS:
// 1. Install Firebase CLI: npm install -g firebase-tools
// 2. Login: firebase login
// 3. Initialize project: firebase init firestore
// 4. Deploy rules: firebase deploy --only firestore:rules
//
// TESTING RULES:
// firebase emulators:start --only firestore
// Visit: http://localhost:4000/firestore
//
// INDEX CREATION:
// The composite index can be created via:
// 1. Firebase Console > Firestore > Indexes
// 2. Add index: Collection ID = "user_images", Fields = "userId (Ascending), createdAt (Descending)"
// 3. Or use the error link when first query fails